/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Blog } from '../models';
import { CreateBlogDto } from '../models';
import { UpdateBlogDto } from '../models';
import { UpdateItemsOrderDto } from '../models';
/**
 * BlogsApi - axios parameter creator
 * @export
 */
export const BlogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Blog -- DASHBOARD
         * @param {CreateBlogDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlog: async (body: CreateBlogDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBlog.');
            }
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a blog -- DASHBOARD
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteBlog.');
            }
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all active blogs -- APP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlogs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all blogs (including inactive) -- DASHBOARD
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBlogsForDashboard: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blogs/dashboard/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get single blog -- BOTH
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleBlog: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSingleBlog.');
            }
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a blog -- DASHBOARD
         * @param {UpdateBlogDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlog: async (body: UpdateBlogDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateBlog.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateBlog.');
            }
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ReOrder the blogs -- DASHBOARD
         * @param {UpdateItemsOrderDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBlogsOrder: async (body: UpdateItemsOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateBlogsOrder.');
            }
            const localVarPath = `/blogs/update-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogsApi - functional programming interface
 * @export
 */
export const BlogsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Blog -- DASHBOARD
         * @param {CreateBlogDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlog(body: CreateBlogDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blog>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).createBlog(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a blog -- DASHBOARD
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).deleteBlog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all active blogs -- APP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlogs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Blog>>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).getAllBlogs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all blogs (including inactive) -- DASHBOARD
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlogsForDashboard(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Blog>>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).getAllBlogsForDashboard(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get single blog -- BOTH
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleBlog(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blog>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).getSingleBlog(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a blog -- DASHBOARD
         * @param {UpdateBlogDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlog(body: UpdateBlogDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blog>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).updateBlog(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary ReOrder the blogs -- DASHBOARD
         * @param {UpdateItemsOrderDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlogsOrder(body: UpdateItemsOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await BlogsApiAxiosParamCreator(configuration).updateBlogsOrder(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BlogsApi - factory interface
 * @export
 */
export const BlogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a Blog -- DASHBOARD
         * @param {CreateBlogDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlog(body: CreateBlogDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Blog>> {
            return BlogsApiFp(configuration).createBlog(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a blog -- DASHBOARD
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BlogsApiFp(configuration).deleteBlog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all active blogs -- APP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlogs(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Blog>>> {
            return BlogsApiFp(configuration).getAllBlogs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all blogs (including inactive) -- DASHBOARD
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBlogsForDashboard(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Blog>>> {
            return BlogsApiFp(configuration).getAllBlogsForDashboard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get single blog -- BOTH
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleBlog(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blog>> {
            return BlogsApiFp(configuration).getSingleBlog(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a blog -- DASHBOARD
         * @param {UpdateBlogDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlog(body: UpdateBlogDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Blog>> {
            return BlogsApiFp(configuration).updateBlog(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ReOrder the blogs -- DASHBOARD
         * @param {UpdateItemsOrderDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBlogsOrder(body: UpdateItemsOrderDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return BlogsApiFp(configuration).updateBlogsOrder(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BlogsApi - object-oriented interface
 * @export
 * @class BlogsApi
 * @extends {BaseAPI}
 */
export class BlogsApi extends BaseAPI {
    /**
     * 
     * @summary Create a Blog -- DASHBOARD
     * @param {CreateBlogDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async createBlog(body: CreateBlogDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blog>> {
        return BlogsApiFp(this.configuration).createBlog(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a blog -- DASHBOARD
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async deleteBlog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BlogsApiFp(this.configuration).deleteBlog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all active blogs -- APP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async getAllBlogs(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Blog>>> {
        return BlogsApiFp(this.configuration).getAllBlogs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all blogs (including inactive) -- DASHBOARD
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async getAllBlogsForDashboard(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Blog>>> {
        return BlogsApiFp(this.configuration).getAllBlogsForDashboard(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get single blog -- BOTH
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async getSingleBlog(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blog>> {
        return BlogsApiFp(this.configuration).getSingleBlog(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a blog -- DASHBOARD
     * @param {UpdateBlogDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async updateBlog(body: UpdateBlogDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Blog>> {
        return BlogsApiFp(this.configuration).updateBlog(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary ReOrder the blogs -- DASHBOARD
     * @param {UpdateItemsOrderDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogsApi
     */
    public async updateBlogsOrder(body: UpdateItemsOrderDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return BlogsApiFp(this.configuration).updateBlogsOrder(body, options).then((request) => request(this.axios, this.basePath));
    }
}
