/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateInventoryLightDto } from '../models';
import { CreateVariantDto } from '../models';
import { ProductVariant } from '../models';
import { SuggestAttributes } from '../models';
import { TableDto } from '../models';
import { UpdateProductVariantDto } from '../models';
/**
 * ProductVariantsApi - axios parameter creator
 * @export
 */
export const ProductVariantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create bulk variants for a product
         * @param {Array<CreateVariantDto>} body 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBulkVariants: async (body: Array<CreateVariantDto>, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBulkVariants.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling createBulkVariants.');
            }
            const localVarPath = `/product-variants/create-bulk-variants/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a variant for a product
         * @param {string} name 
         * @param {string} description 
         * @param {number} width 
         * @param {number} height 
         * @param {number} length 
         * @param {number} weight 
         * @param {string} brand 
         * @param {string} sku 
         * @param {{ [key: string]: string; }} attribute 
         * @param {number} retailPrice 
         * @param {number} costPrice 
         * @param {number} totalSold 
         * @param {Array<TableDto>} tables 
         * @param {Array<Blob>} media 
         * @param {Array<CreateInventoryLightDto>} inventory 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVariantForm: async (name: string, description: string, width: number, height: number, length: number, weight: number, brand: string, sku: string, attribute: { [key: string]: string; }, retailPrice: number, costPrice: number, totalSold: number, tables: Array<TableDto>, media: Array<Blob>, inventory: Array<CreateInventoryLightDto>, productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'width' is not null or undefined
            if (width === null || width === undefined) {
                throw new RequiredError('width','Required parameter width was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new RequiredError('height','Required parameter height was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'length' is not null or undefined
            if (length === null || length === undefined) {
                throw new RequiredError('length','Required parameter length was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'weight' is not null or undefined
            if (weight === null || weight === undefined) {
                throw new RequiredError('weight','Required parameter weight was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'brand' is not null or undefined
            if (brand === null || brand === undefined) {
                throw new RequiredError('brand','Required parameter brand was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'sku' is not null or undefined
            if (sku === null || sku === undefined) {
                throw new RequiredError('sku','Required parameter sku was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'attribute' is not null or undefined
            if (attribute === null || attribute === undefined) {
                throw new RequiredError('attribute','Required parameter attribute was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'retailPrice' is not null or undefined
            if (retailPrice === null || retailPrice === undefined) {
                throw new RequiredError('retailPrice','Required parameter retailPrice was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'costPrice' is not null or undefined
            if (costPrice === null || costPrice === undefined) {
                throw new RequiredError('costPrice','Required parameter costPrice was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'totalSold' is not null or undefined
            if (totalSold === null || totalSold === undefined) {
                throw new RequiredError('totalSold','Required parameter totalSold was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'tables' is not null or undefined
            if (tables === null || tables === undefined) {
                throw new RequiredError('tables','Required parameter tables was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'media' is not null or undefined
            if (media === null || media === undefined) {
                throw new RequiredError('media','Required parameter media was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'inventory' is not null or undefined
            if (inventory === null || inventory === undefined) {
                throw new RequiredError('inventory','Required parameter inventory was null or undefined when calling createVariantForm.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling createVariantForm.');
            }
            const localVarPath = `/product-variants/create/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (width !== undefined) { 
                localVarFormParams.append('width', width as any);
            }

            if (height !== undefined) { 
                localVarFormParams.append('height', height as any);
            }

            if (length !== undefined) { 
                localVarFormParams.append('length', length as any);
            }

            if (weight !== undefined) { 
                localVarFormParams.append('weight', weight as any);
            }

            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }

            if (sku !== undefined) { 
                localVarFormParams.append('sku', sku as any);
            }

            if (attribute !== undefined) { 
                localVarFormParams.append('attribute', attribute as any);
            }

            if (retailPrice !== undefined) { 
                localVarFormParams.append('retailPrice', retailPrice as any);
            }

            if (costPrice !== undefined) { 
                localVarFormParams.append('costPrice', costPrice as any);
            }

            if (totalSold !== undefined) { 
                localVarFormParams.append('totalSold', totalSold as any);
            }
            if (tables) {
                tables.forEach((element) => {
                    localVarFormParams.append('tables', element as any);
                })
            }
            if (media) {
                media.forEach((element) => {
                    localVarFormParams.append('media', element as any);
                })
            }
            if (inventory) {
                inventory.forEach((element) => {
                    localVarFormParams.append('inventory', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a variant
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVariant: async (variantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variantId' is not null or undefined
            if (variantId === null || variantId === undefined) {
                throw new RequiredError('variantId','Required parameter variantId was null or undefined when calling deleteVariant.');
            }
            const localVarPath = `/product-variants/{variantId}`
                .replace(`{${"variantId"}}`, encodeURIComponent(String(variantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a variant
         * @param {UpdateProductVariantDto} body 
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVariant: async (body: UpdateProductVariantDto, variantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling editVariant.');
            }
            // verify required parameter 'variantId' is not null or undefined
            if (variantId === null || variantId === undefined) {
                throw new RequiredError('variantId','Required parameter variantId was null or undefined when calling editVariant.');
            }
            const localVarPath = `/product-variants/{variantId}`
                .replace(`{${"variantId"}}`, encodeURIComponent(String(variantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all variants of a product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllVariants: async (productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling getAllVariants.');
            }
            const localVarPath = `/product-variants/allVariants/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get suggested product attributes
         * @param {SuggestAttributes} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuggestedProductAttributes: async (body: SuggestAttributes, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getSuggestedProductAttributes.');
            }
            const localVarPath = `/product-variants/suggested-product-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductVariantsApi - functional programming interface
 * @export
 */
export const ProductVariantsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create bulk variants for a product
         * @param {Array<CreateVariantDto>} body 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBulkVariants(body: Array<CreateVariantDto>, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProductVariant>>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).createBulkVariants(body, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a variant for a product
         * @param {string} name 
         * @param {string} description 
         * @param {number} width 
         * @param {number} height 
         * @param {number} length 
         * @param {number} weight 
         * @param {string} brand 
         * @param {string} sku 
         * @param {{ [key: string]: string; }} attribute 
         * @param {number} retailPrice 
         * @param {number} costPrice 
         * @param {number} totalSold 
         * @param {Array<TableDto>} tables 
         * @param {Array<Blob>} media 
         * @param {Array<CreateInventoryLightDto>} inventory 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariantForm(name: string, description: string, width: number, height: number, length: number, weight: number, brand: string, sku: string, attribute: { [key: string]: string; }, retailPrice: number, costPrice: number, totalSold: number, tables: Array<TableDto>, media: Array<Blob>, inventory: Array<CreateInventoryLightDto>, productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductVariant>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).createVariantForm(name, description, width, height, length, weight, brand, sku, attribute, retailPrice, costPrice, totalSold, tables, media, inventory, productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a variant
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariant(variantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).deleteVariant(variantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Edit a variant
         * @param {UpdateProductVariantDto} body 
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVariant(body: UpdateProductVariantDto, variantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductVariant>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).editVariant(body, variantId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all variants of a product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVariants(productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProductVariant>>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).getAllVariants(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get suggested product attributes
         * @param {SuggestAttributes} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuggestedProductAttributes(body: SuggestAttributes, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductVariantsApiAxiosParamCreator(configuration).getSuggestedProductAttributes(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductVariantsApi - factory interface
 * @export
 */
export const ProductVariantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create bulk variants for a product
         * @param {Array<CreateVariantDto>} body 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBulkVariants(body: Array<CreateVariantDto>, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProductVariant>>> {
            return ProductVariantsApiFp(configuration).createBulkVariants(body, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a variant for a product
         * @param {string} name 
         * @param {string} description 
         * @param {number} width 
         * @param {number} height 
         * @param {number} length 
         * @param {number} weight 
         * @param {string} brand 
         * @param {string} sku 
         * @param {{ [key: string]: string; }} attribute 
         * @param {number} retailPrice 
         * @param {number} costPrice 
         * @param {number} totalSold 
         * @param {Array<TableDto>} tables 
         * @param {Array<Blob>} media 
         * @param {Array<CreateInventoryLightDto>} inventory 
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVariantForm(name: string, description: string, width: number, height: number, length: number, weight: number, brand: string, sku: string, attribute: { [key: string]: string; }, retailPrice: number, costPrice: number, totalSold: number, tables: Array<TableDto>, media: Array<Blob>, inventory: Array<CreateInventoryLightDto>, productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductVariant>> {
            return ProductVariantsApiFp(configuration).createVariantForm(name, description, width, height, length, weight, brand, sku, attribute, retailPrice, costPrice, totalSold, tables, media, inventory, productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a variant
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVariant(variantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductVariantsApiFp(configuration).deleteVariant(variantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit a variant
         * @param {UpdateProductVariantDto} body 
         * @param {string} variantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editVariant(body: UpdateProductVariantDto, variantId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductVariant>> {
            return ProductVariantsApiFp(configuration).editVariant(body, variantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all variants of a product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllVariants(productId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProductVariant>>> {
            return ProductVariantsApiFp(configuration).getAllVariants(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get suggested product attributes
         * @param {SuggestAttributes} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuggestedProductAttributes(body: SuggestAttributes, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductVariantsApiFp(configuration).getSuggestedProductAttributes(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductVariantsApi - object-oriented interface
 * @export
 * @class ProductVariantsApi
 * @extends {BaseAPI}
 */
export class ProductVariantsApi extends BaseAPI {
    /**
     * 
     * @summary Create bulk variants for a product
     * @param {Array<CreateVariantDto>} body 
     * @param {string} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async createBulkVariants(body: Array<CreateVariantDto>, productId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProductVariant>>> {
        return ProductVariantsApiFp(this.configuration).createBulkVariants(body, productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a variant for a product
     * @param {string} name 
     * @param {string} description 
     * @param {number} width 
     * @param {number} height 
     * @param {number} length 
     * @param {number} weight 
     * @param {string} brand 
     * @param {string} sku 
     * @param {{ [key: string]: string; }} attribute 
     * @param {number} retailPrice 
     * @param {number} costPrice 
     * @param {number} totalSold 
     * @param {Array<TableDto>} tables 
     * @param {Array<Blob>} media 
     * @param {Array<CreateInventoryLightDto>} inventory 
     * @param {string} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async createVariantForm(name: string, description: string, width: number, height: number, length: number, weight: number, brand: string, sku: string, attribute: { [key: string]: string; }, retailPrice: number, costPrice: number, totalSold: number, tables: Array<TableDto>, media: Array<Blob>, inventory: Array<CreateInventoryLightDto>, productId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductVariant>> {
        return ProductVariantsApiFp(this.configuration).createVariantForm(name, description, width, height, length, weight, brand, sku, attribute, retailPrice, costPrice, totalSold, tables, media, inventory, productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a variant
     * @param {string} variantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async deleteVariant(variantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductVariantsApiFp(this.configuration).deleteVariant(variantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Edit a variant
     * @param {UpdateProductVariantDto} body 
     * @param {string} variantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async editVariant(body: UpdateProductVariantDto, variantId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductVariant>> {
        return ProductVariantsApiFp(this.configuration).editVariant(body, variantId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all variants of a product
     * @param {string} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async getAllVariants(productId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProductVariant>>> {
        return ProductVariantsApiFp(this.configuration).getAllVariants(productId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get suggested product attributes
     * @param {SuggestAttributes} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    public async getSuggestedProductAttributes(body: SuggestAttributes, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductVariantsApiFp(this.configuration).getSuggestedProductAttributes(body, options).then((request) => request(this.axios, this.basePath));
    }
}
