/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BulkMoveSubcategoriesDto } from '../models';
import { BulkUnassignSubcategoriesDto } from '../models';
import { CreateSubCategoryDto } from '../models';
import { FlatSubCategory } from '../models';
import { MoveSubcategoryDto } from '../models';
import { SubCategory } from '../models';
import { SubcategoryWithChildProductCount } from '../models';
import { UpdateSubCategoryDto } from '../models';
/**
 * SubCategoriesApi - axios parameter creator
 * @export
 */
export const SubCategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Move multiple subcategories to a new parent category
         * @param {BulkMoveSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkMoveSubcategories: async (body: BulkMoveSubcategoriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling bulkMoveSubcategories.');
            }
            const localVarPath = `/sub-categories/bulk-move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign multiple subcategories from their parent categories
         * @param {BulkUnassignSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUnassignSubcategories: async (body: BulkUnassignSubcategoriesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling bulkUnassignSubcategories.');
            }
            const localVarPath = `/sub-categories/bulk-unassign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a sub-category
         * @param {CreateSubCategoryDto} body 
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubCategory: async (body: CreateSubCategoryDto, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSubCategory.');
            }
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling createSubCategory.');
            }
            const localVarPath = `/sub-categories/sub-category/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Sub-Category to a Sub-Category
         * @param {CreateSubCategoryDto} body 
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubSubCategory: async (body: CreateSubCategoryDto, subCategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSubSubCategory.');
            }
            // verify required parameter 'subCategoryId' is not null or undefined
            if (subCategoryId === null || subCategoryId === undefined) {
                throw new RequiredError('subCategoryId','Required parameter subCategoryId was null or undefined when calling createSubSubCategory.');
            }
            const localVarPath = `/sub-categories/sub-sub-category/{subCategoryId}`
                .replace(`{${"subCategoryId"}}`, encodeURIComponent(String(subCategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSubCategory.');
            }
            const localVarPath = `/sub-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all sub-categories
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubCategories: async (categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling getAllSubCategories.');
            }
            const localVarPath = `/sub-categories/all/subcategories/{categoryId}`
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all sub-sub-categories
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubSubCategories: async (subCategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subCategoryId' is not null or undefined
            if (subCategoryId === null || subCategoryId === undefined) {
                throw new RequiredError('subCategoryId','Required parameter subCategoryId was null or undefined when calling getAllSubSubCategories.');
            }
            const localVarPath = `/sub-categories/all/sub-subcategories/{subCategoryId}`
                .replace(`{${"subCategoryId"}}`, encodeURIComponent(String(subCategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orphaned subcategories (without parent category)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrphanedSubcategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sub-categories/orphaned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all parent categories and subcategories of a subcategory
         * @param {string} id Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParents: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getParents.');
            }
            const localVarPath = `/sub-categories/parents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSubCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSingleSubCategory.');
            }
            const localVarPath = `/sub-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move a subcategory to a new parent category
         * @param {MoveSubcategoryDto} body 
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveSubcategory: async (body: MoveSubcategoryDto, subcategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling moveSubcategory.');
            }
            // verify required parameter 'subcategoryId' is not null or undefined
            if (subcategoryId === null || subcategoryId === undefined) {
                throw new RequiredError('subcategoryId','Required parameter subcategoryId was null or undefined when calling moveSubcategory.');
            }
            const localVarPath = `/sub-categories/{subcategoryId}/move`
                .replace(`{${"subcategoryId"}}`, encodeURIComponent(String(subcategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unassign a subcategory from its parent category
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSubcategory: async (subcategoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subcategoryId' is not null or undefined
            if (subcategoryId === null || subcategoryId === undefined) {
                throw new RequiredError('subcategoryId','Required parameter subcategoryId was null or undefined when calling unassignSubcategory.');
            }
            const localVarPath = `/sub-categories/{subcategoryId}/unassign`
                .replace(`{${"subcategoryId"}}`, encodeURIComponent(String(subcategoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a sub-category
         * @param {UpdateSubCategoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubCategory: async (body: UpdateSubCategoryDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSubCategory.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSubCategory.');
            }
            const localVarPath = `/sub-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubCategoriesApi - functional programming interface
 * @export
 */
export const SubCategoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Move multiple subcategories to a new parent category
         * @param {BulkMoveSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkMoveSubcategories(body: BulkMoveSubcategoriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).bulkMoveSubcategories(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unassign multiple subcategories from their parent categories
         * @param {BulkUnassignSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUnassignSubcategories(body: BulkUnassignSubcategoriesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).bulkUnassignSubcategories(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a sub-category
         * @param {CreateSubCategoryDto} body 
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubCategory(body: CreateSubCategoryDto, categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubCategory>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).createSubCategory(body, categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a Sub-Category to a Sub-Category
         * @param {CreateSubCategoryDto} body 
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubSubCategory(body: CreateSubCategoryDto, subCategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubCategory>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).createSubSubCategory(body, subCategoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).deleteSubCategory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all sub-categories
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubCategories(categoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).getAllSubCategories(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all sub-sub-categories
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubSubCategories(subCategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).getAllSubSubCategories(subCategoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all orphaned subcategories (without parent category)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrphanedSubcategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).getOrphanedSubcategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all parent categories and subcategories of a subcategory
         * @param {string} id Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParents(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FlatSubCategory>>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).getParents(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a single sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleSubCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubcategoryWithChildProductCount>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).getSingleSubCategory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Move a subcategory to a new parent category
         * @param {MoveSubcategoryDto} body 
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveSubcategory(body: MoveSubcategoryDto, subcategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubCategory>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).moveSubcategory(body, subcategoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unassign a subcategory from its parent category
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignSubcategory(subcategoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubCategory>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).unassignSubcategory(subcategoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a sub-category
         * @param {UpdateSubCategoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubCategory(body: UpdateSubCategoryDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubCategory>>> {
            const localVarAxiosArgs = await SubCategoriesApiAxiosParamCreator(configuration).updateSubCategory(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubCategoriesApi - factory interface
 * @export
 */
export const SubCategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Move multiple subcategories to a new parent category
         * @param {BulkMoveSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkMoveSubcategories(body: BulkMoveSubcategoriesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubCategory>>> {
            return SubCategoriesApiFp(configuration).bulkMoveSubcategories(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unassign multiple subcategories from their parent categories
         * @param {BulkUnassignSubcategoriesDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUnassignSubcategories(body: BulkUnassignSubcategoriesDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubCategory>>> {
            return SubCategoriesApiFp(configuration).bulkUnassignSubcategories(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a sub-category
         * @param {CreateSubCategoryDto} body 
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubCategory(body: CreateSubCategoryDto, categoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubCategory>> {
            return SubCategoriesApiFp(configuration).createSubCategory(body, categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a Sub-Category to a Sub-Category
         * @param {CreateSubCategoryDto} body 
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubSubCategory(body: CreateSubCategoryDto, subCategoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubCategory>> {
            return SubCategoriesApiFp(configuration).createSubSubCategory(body, subCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubCategory(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SubCategoriesApiFp(configuration).deleteSubCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all sub-categories
         * @param {string} categoryId Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubCategories(categoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubCategory>>> {
            return SubCategoriesApiFp(configuration).getAllSubCategories(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all sub-sub-categories
         * @param {string} subCategoryId Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubSubCategories(subCategoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubCategory>>> {
            return SubCategoriesApiFp(configuration).getAllSubSubCategories(subCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orphaned subcategories (without parent category)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrphanedSubcategories(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SubCategory>>> {
            return SubCategoriesApiFp(configuration).getOrphanedSubcategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all parent categories and subcategories of a subcategory
         * @param {string} id Sub Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParents(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FlatSubCategory>>> {
            return SubCategoriesApiFp(configuration).getParents(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single sub-category
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleSubCategory(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubcategoryWithChildProductCount>> {
            return SubCategoriesApiFp(configuration).getSingleSubCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move a subcategory to a new parent category
         * @param {MoveSubcategoryDto} body 
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveSubcategory(body: MoveSubcategoryDto, subcategoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubCategory>> {
            return SubCategoriesApiFp(configuration).moveSubcategory(body, subcategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unassign a subcategory from its parent category
         * @param {string} subcategoryId Subcategory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignSubcategory(subcategoryId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubCategory>> {
            return SubCategoriesApiFp(configuration).unassignSubcategory(subcategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a sub-category
         * @param {UpdateSubCategoryDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubCategory(body: UpdateSubCategoryDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SubCategory>> {
            return SubCategoriesApiFp(configuration).updateSubCategory(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubCategoriesApi - object-oriented interface
 * @export
 * @class SubCategoriesApi
 * @extends {BaseAPI}
 */
export class SubCategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Move multiple subcategories to a new parent category
     * @param {BulkMoveSubcategoriesDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async bulkMoveSubcategories(body: BulkMoveSubcategoriesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubCategory>>> {
        return SubCategoriesApiFp(this.configuration).bulkMoveSubcategories(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Unassign multiple subcategories from their parent categories
     * @param {BulkUnassignSubcategoriesDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async bulkUnassignSubcategories(body: BulkUnassignSubcategoriesDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubCategory>>> {
        return SubCategoriesApiFp(this.configuration).bulkUnassignSubcategories(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a sub-category
     * @param {CreateSubCategoryDto} body 
     * @param {string} categoryId Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async createSubCategory(body: CreateSubCategoryDto, categoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubCategory>> {
        return SubCategoriesApiFp(this.configuration).createSubCategory(body, categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a Sub-Category to a Sub-Category
     * @param {CreateSubCategoryDto} body 
     * @param {string} subCategoryId Sub Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async createSubSubCategory(body: CreateSubCategoryDto, subCategoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubCategory>> {
        return SubCategoriesApiFp(this.configuration).createSubSubCategory(body, subCategoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a sub-category
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async deleteSubCategory(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SubCategoriesApiFp(this.configuration).deleteSubCategory(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all sub-categories
     * @param {string} categoryId Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async getAllSubCategories(categoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubCategory>>> {
        return SubCategoriesApiFp(this.configuration).getAllSubCategories(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all sub-sub-categories
     * @param {string} subCategoryId Sub Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async getAllSubSubCategories(subCategoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubCategory>>> {
        return SubCategoriesApiFp(this.configuration).getAllSubSubCategories(subCategoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all orphaned subcategories (without parent category)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async getOrphanedSubcategories(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SubCategory>>> {
        return SubCategoriesApiFp(this.configuration).getOrphanedSubcategories(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all parent categories and subcategories of a subcategory
     * @param {string} id Sub Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async getParents(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FlatSubCategory>>> {
        return SubCategoriesApiFp(this.configuration).getParents(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a single sub-category
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async getSingleSubCategory(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubcategoryWithChildProductCount>> {
        return SubCategoriesApiFp(this.configuration).getSingleSubCategory(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Move a subcategory to a new parent category
     * @param {MoveSubcategoryDto} body 
     * @param {string} subcategoryId Subcategory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async moveSubcategory(body: MoveSubcategoryDto, subcategoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubCategory>> {
        return SubCategoriesApiFp(this.configuration).moveSubcategory(body, subcategoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Unassign a subcategory from its parent category
     * @param {string} subcategoryId Subcategory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async unassignSubcategory(subcategoryId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubCategory>> {
        return SubCategoriesApiFp(this.configuration).unassignSubcategory(subcategoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a sub-category
     * @param {UpdateSubCategoryDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubCategoriesApi
     */
    public async updateSubCategory(body: UpdateSubCategoryDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubCategory>> {
        return SubCategoriesApiFp(this.configuration).updateSubCategory(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
