/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CartBodyDTO } from '../models';
import { CartResponseDto } from '../models';
import { ManualOrderDTO } from '../models';
/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clears the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearCart: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart/clearCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the user cart
         * @param {string} [rateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCart: async (rateId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cart/user/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the user cart
         * @param {CartBodyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleUserCart: async (body: CartBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling handleUserCart.');
            }
            const localVarPath = `/cart/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * this endpoint is used to calculate the cart for a visitor or for a manual order in the dashboard, it calculates the cart prices, discounts, taxes, shipping prices, and totals.
         * @summary to be used for visitor cart calculation and also dashboard manual order cart calculation
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleVisitorCart: async (body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling handleVisitorCart.');
            }
            // verify required parameter 'isDelivery' is not null or undefined
            if (isDelivery === null || isDelivery === undefined) {
                throw new RequiredError('isDelivery','Required parameter isDelivery was null or undefined when calling handleVisitorCart.');
            }
            const localVarPath = `/cart/onspot/calculate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isDelivery !== undefined) {
                localVarQueryParameter['isDelivery'] = isDelivery;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }

            if (addressId !== undefined) {
                localVarQueryParameter['addressId'] = addressId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Clears the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCart(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CartApiAxiosParamCreator(configuration).clearCart(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the user cart
         * @param {string} [rateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCart(rateId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CartResponseDto>>> {
            const localVarAxiosArgs = await CartApiAxiosParamCreator(configuration).getUserCart(rateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update the user cart
         * @param {CartBodyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUserCart(body: CartBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await CartApiAxiosParamCreator(configuration).handleUserCart(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * this endpoint is used to calculate the cart for a visitor or for a manual order in the dashboard, it calculates the cart prices, discounts, taxes, shipping prices, and totals.
         * @summary to be used for visitor cart calculation and also dashboard manual order cart calculation
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleVisitorCart(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CartResponseDto>>> {
            const localVarAxiosArgs = await CartApiAxiosParamCreator(configuration).handleVisitorCart(body, isDelivery, userId, rateId, addressId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Clears the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearCart(options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CartApiFp(configuration).clearCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the user cart
         * @param {string} [rateId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCart(rateId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CartResponseDto>> {
            return CartApiFp(configuration).getUserCart(rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the user cart
         * @param {CartBodyDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleUserCart(body: CartBodyDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return CartApiFp(configuration).handleUserCart(body, options).then((request) => request(axios, basePath));
        },
        /**
         * this endpoint is used to calculate the cart for a visitor or for a manual order in the dashboard, it calculates the cart prices, discounts, taxes, shipping prices, and totals.
         * @summary to be used for visitor cart calculation and also dashboard manual order cart calculation
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleVisitorCart(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CartResponseDto>> {
            return CartApiFp(configuration).handleVisitorCart(body, isDelivery, userId, rateId, addressId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @summary Clears the cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public async clearCart(options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CartApiFp(this.configuration).clearCart(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the user cart
     * @param {string} [rateId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public async getUserCart(rateId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CartResponseDto>> {
        return CartApiFp(this.configuration).getUserCart(rateId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update the user cart
     * @param {CartBodyDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public async handleUserCart(body: CartBodyDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return CartApiFp(this.configuration).handleUserCart(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * this endpoint is used to calculate the cart for a visitor or for a manual order in the dashboard, it calculates the cart prices, discounts, taxes, shipping prices, and totals.
     * @summary to be used for visitor cart calculation and also dashboard manual order cart calculation
     * @param {ManualOrderDTO} body 
     * @param {boolean} isDelivery 
     * @param {string} [userId] 
     * @param {string} [rateId] 
     * @param {string} [addressId] The desired address id for the store location for the pickup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public async handleVisitorCart(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CartResponseDto>> {
        return CartApiFp(this.configuration).handleVisitorCart(body, isDelivery, userId, rateId, addressId, options).then((request) => request(this.axios, this.basePath));
    }
}
