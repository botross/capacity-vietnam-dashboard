/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AddContactToListDTO } from '../models';
import { BrowserStatsResponseDTO } from '../models';
import { CampaignContentResponseDTO } from '../models';
import { CampaignDraftResponseDTO } from '../models';
import { CampaignDraftScheduleResponseDTO } from '../models';
import { CampaignDraftSendingResponseDTO } from '../models';
import { ContactAggregatedStatsResponseDTO } from '../models';
import { ContactFullResponseDTO } from '../models';
import { ContactListStatsResponseDTO } from '../models';
import { ContactListsResponseDTO } from '../models';
import { CountryStatsResponseDTO } from '../models';
import { CreateContactDTO } from '../models';
import { CreateContactListDTO } from '../models';
import { CreateEmailTemplateDTO } from '../models';
import { CreateMarketingCampaignDTO } from '../models';
import { EmailTemplateResponseDTO } from '../models';
import { GeneralStatsResponseDTO } from '../models';
import { LinkStatsResponseDTO } from '../models';
import { ScheduleCampaignDraftDTO } from '../models';
import { SendTestEmailDTO } from '../models';
import { UpdateCampaignDraftContentDto } from '../models';
import { UpdateMarketingCampDraftDto } from '../models';
/**
 * MarketingApi - axios parameter creator
 * @export
 */
export const MarketingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * to add a contact to a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Add a contact to a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addContactToList: async (body: AddContactToListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addContactToList.');
            }
            const localVarPath = `/marketing/add-contact-to-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to cancel the scheduled sending of a campaign draft by providing the ID of the campaign draft.
         * @summary Cancel the scheduled sending of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelScheduledSendingOfCampaignDraft: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancelScheduledSendingOfCampaignDraft.');
            }
            const localVarPath = `/marketing/cancel-scheduled-sending-of-camp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to create a new campaign draft. The user must provide a title, subject, contactsListId, senderEmail, senderName, senderId and locale.
         * @summary Create a new campaign draft
         * @param {CreateMarketingCampaignDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCampaignDraft: async (body: CreateMarketingCampaignDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCampaignDraft.');
            }
            const localVarPath = `/marketing/create-campaign-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to create a new contact. The user must provide a name, email and isExcludedFromCampaigns parameter.
         * @summary Create a new contact
         * @param {CreateContactDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (body: CreateContactDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createContact.');
            }
            const localVarPath = `/marketing/create-contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to create a new contact list. The user must provide a name for the contact list.
         * @summary Create a new contact list
         * @param {CreateContactListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactList: async (body: CreateContactListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createContactList.');
            }
            const localVarPath = `/marketing/create-contact-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to create a new email template. The user must provide a name, html content, text content, subject and description.
         * @summary Create a new email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailTemplate: async (body: CreateEmailTemplateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createEmailTemplate.');
            }
            const localVarPath = `/marketing/create-email-template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to delete a contact list by providing the ID of the contact list.
         * @summary Delete a contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteContactList.');
            }
            const localVarPath = `/marketing/delete-contact-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to delete an existing email template. The user must provide the ID of the email template.
         * @summary Delete an existing email template
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailTemplate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEmailTemplate.');
            }
            const localVarPath = `/marketing/delete-email-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to retrieve aggregated open and click statistics, grouped by recipient country.
         * @summary ***** Retrieve aggregated open and click statistics, grouped by recipient country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedOpenAndClickStatsGroupedByCountry: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-aggregated-open-click-stats-grouped-by-country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics for all clicked links.
         * @summary Get aggregated statistics for all clicked links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsForAllClickedLinks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-aggregated-stats-for-all-clicked-links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics for all clicked links in a campaign by providing the ID of the campaign.
         * @summary Get aggregated statistics for all clicked links in a campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsForAllClickedLinksInCampaign: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAggregatedStatsForAllClickedLinksInCampaign.');
            }
            const localVarPath = `/marketing/get-aggregated-stats-for-all-clicked-links-in-campaign/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics for a specific contact by providing the ID of the contact.
         * @summary Get aggregated statistics for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsForSpecificContact: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAggregatedStatsForSpecificContact.');
            }
            const localVarPath = `/marketing/get-aggregated-stats-for-specific-contact/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics for a specific list recipient by providing the ID of the list recipient.
         * @summary Get aggregated statistics for a specific list recipient
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsForSpecificListRecipient: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAggregatedStatsForSpecificListRecipient.');
            }
            const localVarPath = `/marketing/get-aggregated-stats-for-specific-list-recipient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics, grouped by contact.
         * @summary Get aggregated statistics, grouped by contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsGroupedByContact: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-aggregated-stats-grouped-by-contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get aggregated statistics, grouped by list recipient.
         * @summary Get aggregated statistics, grouped by list recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAggregatedStatsGroupedByListRecipient: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-aggregated-stats-grouped-by-list-recipient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get all campaign drafts that have been created by the user.
         * @summary Get all campaign drafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCampaignDrafts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-all-campaign-drafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get all contact lists that have been created by the user.
         * @summary Get all contact lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContactLists: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-all-contact-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get all contact lists for a specific contact by providing the ID of the contact.
         * @summary Get all contact lists for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContactListsForContact: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllContactListsForContact.');
            }
            const localVarPath = `/marketing/get-all-contact-lists-for-contact/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get all contacts that have been created by the user.
         * @summary Get all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllContacts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-all-contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get all email templates that have been created by the user.
         * @summary Get all email templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmailTemplates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-all-email-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get a single campaign draft by providing the ID of the campaign draft.
         * @summary Get a single campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDraft: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCampaignDraft.');
            }
            const localVarPath = `/marketing/get-campaign-draft/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to retrieve the content of a campaign draft email by providing the ID of the campaign draft.
         * @summary Retrieve the content of a campaign draft email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDraftContent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCampaignDraftContent.');
            }
            const localVarPath = `/marketing/get-campaign-draft-content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get a single contact by providing the ID of the contact.
         * @summary Get a single contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getContact.');
            }
            const localVarPath = `/marketing/get-contact/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get a single contact list by providing the ID of the contact list.
         * @summary Get a single contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getContactList.');
            }
            const localVarPath = `/marketing/get-contact-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get general details and stats for all drafts, AB Testing objects and/or sent campaigns.
         * @summary Get general details and stats for all drafts, AB Testing objects and/or sent campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGeneralDetailsAndStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-general-stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get open or click counts, grouped by web browser / email client.
         * @summary Get open or click counts, grouped by web browser / email client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenOrClickCountsGroupedByBrowser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketing/get-open-or-click-counts-grouped-by-browser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to get information about a specific draft, AB Testing object or sent campaign by providing the ID of the campaign
         * @summary Get information about a specific draft, AB Testing object or sent campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificStats: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSpecificStats.');
            }
            const localVarPath = `/marketing/get-specific-stats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to retrieve statistics, aggregated by recipient's Email Service Provider  (ESP).
         * @summary Retrieve statistics, aggregated by recipient's Email Service Provider (ESP)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatsAggregatedByRecipientESP: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStatsAggregatedByRecipientESP.');
            }
            const localVarPath = `/marketing/get-stats-aggregated-by-recipient-esp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to remove a contact from a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Remove a contact from a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeContactFromList: async (body: AddContactToListDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeContactFromList.');
            }
            const localVarPath = `/marketing/remove-contact-from-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to retrieve the sending schedule of a campaign draft by providing the ID of the campaign draft.
         * @summary Retrieve the sending schedule of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSendingScheduleOfCampaignDraft: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling retrieveSendingScheduleOfCampaignDraft.');
            }
            const localVarPath = `/marketing/get-sending-schedule-of-camp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to schedule a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Schedule a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleCampaignDraft: async (body: ScheduleCampaignDraftDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling scheduleCampaignDraft.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling scheduleCampaignDraft.');
            }
            const localVarPath = `/marketing/schedule-campaign-draft/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to send a campaign draft immediately by providing the ID of the campaign draft.
         * @summary Send a campaign draft immediately
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCampaignDraftImmediately: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sendCampaignDraftImmediately.');
            }
            const localVarPath = `/marketing/send-campaign-draft-immediately/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to send a test email for a specified campaign draft by providing the ID of the campaign draft and the recipients of the test email.
         * @summary Send a test email for a specified campaign draft
         * @param {SendTestEmailDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTestEmail: async (body: SendTestEmailDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendTestEmail.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sendTestEmail.');
            }
            const localVarPath = `/marketing/send-test-email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update a campaign draft. The user can change the title, subject, contactsListId, senderEmail, senderName, senderId and locale of the campaign draft.
         * @summary Update a campaign draft
         * @param {UpdateMarketingCampDraftDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignDraft: async (body: UpdateMarketingCampDraftDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCampaignDraft.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCampaignDraft.');
            }
            const localVarPath = `/marketing/update-campaign-draft/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update the content of a campaign draft. The user must provide the ID of the campaign draft and the html content.
         * @summary Update the content of a campaign draft
         * @param {UpdateCampaignDraftContentDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCampaignDraftContent: async (body: UpdateCampaignDraftContentDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateCampaignDraftContent.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCampaignDraftContent.');
            }
            const localVarPath = `/marketing/update-campaign-draft-content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update a contact. The user can exclude the contact from campaigns by setting the isExcludedFromCampaigns parameter to true.
         * @summary Update a contact
         * @param {string} id 
         * @param {boolean} isExcludedFromCampaigns 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (id: string, isExcludedFromCampaigns: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateContact.');
            }
            // verify required parameter 'isExcludedFromCampaigns' is not null or undefined
            if (isExcludedFromCampaigns === null || isExcludedFromCampaigns === undefined) {
                throw new RequiredError('isExcludedFromCampaigns','Required parameter isExcludedFromCampaigns was null or undefined when calling updateContact.');
            }
            const localVarPath = `/marketing/update-contact/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isExcludedFromCampaigns !== undefined) {
                localVarQueryParameter['isExcludedFromCampaigns'] = isExcludedFromCampaigns;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update a contact list. The user can change the name of the contact list.
         * @summary Update a contact list
         * @param {CreateContactListDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContactList: async (body: CreateContactListDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateContactList.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateContactList.');
            }
            const localVarPath = `/marketing/update-contact-list/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update an existing email template. The user must provide the ID of the email template and the name, html content, text content, subject and description.
         * @summary Update an existing email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailTemplate: async (body: CreateEmailTemplateDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateEmailTemplate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEmailTemplate.');
            }
            const localVarPath = `/marketing/update-email-template/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to update the sending schedule of a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Update the sending schedule of a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSendingScheduleOfCampaignDraft: async (body: ScheduleCampaignDraftDTO, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSendingScheduleOfCampaignDraft.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSendingScheduleOfCampaignDraft.');
            }
            const localVarPath = `/marketing/update-sending-schedule-of-camp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * to view the sending status of a campaign draft by providing the ID of the campaign draft.
         * @summary View the sending status of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSendingStatusOfCampaignDraft: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewSendingStatusOfCampaignDraft.');
            }
            const localVarPath = `/marketing/get-sending-status-of-camp/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketingApi - functional programming interface
 * @export
 */
export const MarketingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * to add a contact to a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Add a contact to a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactToList(body: AddContactToListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).addContactToList(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to cancel the scheduled sending of a campaign draft by providing the ID of the campaign draft.
         * @summary Cancel the scheduled sending of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelScheduledSendingOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).cancelScheduledSendingOfCampaignDraft(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to create a new campaign draft. The user must provide a title, subject, contactsListId, senderEmail, senderName, senderId and locale.
         * @summary Create a new campaign draft
         * @param {CreateMarketingCampaignDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignDraft(body: CreateMarketingCampaignDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).createCampaignDraft(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to create a new contact. The user must provide a name, email and isExcludedFromCampaigns parameter.
         * @summary Create a new contact
         * @param {CreateContactDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(body: CreateContactDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactFullResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).createContact(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to create a new contact list. The user must provide a name for the contact list.
         * @summary Create a new contact list
         * @param {CreateContactListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactList(body: CreateContactListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).createContactList(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to create a new email template. The user must provide a name, html content, text content, subject and description.
         * @summary Create a new email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailTemplate(body: CreateEmailTemplateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).createEmailTemplate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to delete a contact list by providing the ID of the contact list.
         * @summary Delete a contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactList(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).deleteContactList(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to delete an existing email template. The user must provide the ID of the email template.
         * @summary Delete an existing email template
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmailTemplate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).deleteEmailTemplate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to retrieve aggregated open and click statistics, grouped by recipient country.
         * @summary ***** Retrieve aggregated open and click statistics, grouped by recipient country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedOpenAndClickStatsGroupedByCountry(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CountryStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedOpenAndClickStatsGroupedByCountry(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics for all clicked links.
         * @summary Get aggregated statistics for all clicked links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForAllClickedLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LinkStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsForAllClickedLinks(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics for all clicked links in a campaign by providing the ID of the campaign.
         * @summary Get aggregated statistics for all clicked links in a campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForAllClickedLinksInCampaign(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsForAllClickedLinksInCampaign(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics for a specific contact by providing the ID of the contact.
         * @summary Get aggregated statistics for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForSpecificContact(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsForSpecificContact(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics for a specific list recipient by providing the ID of the list recipient.
         * @summary Get aggregated statistics for a specific list recipient
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForSpecificListRecipient(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsForSpecificListRecipient(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics, grouped by contact.
         * @summary Get aggregated statistics, grouped by contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsGroupedByContact(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsGroupedByContact(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get aggregated statistics, grouped by list recipient.
         * @summary Get aggregated statistics, grouped by list recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsGroupedByListRecipient(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAggregatedStatsGroupedByListRecipient(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get all campaign drafts that have been created by the user.
         * @summary Get all campaign drafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCampaignDrafts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAllCampaignDrafts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get all contact lists that have been created by the user.
         * @summary Get all contact lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContactLists(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAllContactLists(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get all contact lists for a specific contact by providing the ID of the contact.
         * @summary Get all contact lists for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContactListsForContact(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAllContactListsForContact(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get all contacts that have been created by the user.
         * @summary Get all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContacts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactFullResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAllContacts(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get all email templates that have been created by the user.
         * @summary Get all email templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmailTemplates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getAllEmailTemplates(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get a single campaign draft by providing the ID of the campaign draft.
         * @summary Get a single campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getCampaignDraft(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to retrieve the content of a campaign draft email by providing the ID of the campaign draft.
         * @summary Retrieve the content of a campaign draft email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDraftContent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignContentResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getCampaignDraftContent(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get a single contact by providing the ID of the contact.
         * @summary Get a single contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactFullResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getContact(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get a single contact list by providing the ID of the contact list.
         * @summary Get a single contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactList(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getContactList(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get general details and stats for all drafts, AB Testing objects and/or sent campaigns.
         * @summary Get general details and stats for all drafts, AB Testing objects and/or sent campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneralDetailsAndStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GeneralStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getGeneralDetailsAndStats(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get open or click counts, grouped by web browser / email client.
         * @summary Get open or click counts, grouped by web browser / email client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenOrClickCountsGroupedByBrowser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BrowserStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getOpenOrClickCountsGroupedByBrowser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to get information about a specific draft, AB Testing object or sent campaign by providing the ID of the campaign
         * @summary Get information about a specific draft, AB Testing object or sent campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificStats(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GeneralStatsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getSpecificStats(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to retrieve statistics, aggregated by recipient's Email Service Provider  (ESP).
         * @summary Retrieve statistics, aggregated by recipient's Email Service Provider (ESP)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatsAggregatedByRecipientESP(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).getStatsAggregatedByRecipientESP(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to remove a contact from a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Remove a contact from a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactFromList(body: AddContactToListDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).removeContactFromList(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to retrieve the sending schedule of a campaign draft by providing the ID of the campaign draft.
         * @summary Retrieve the sending schedule of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSendingScheduleOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).retrieveSendingScheduleOfCampaignDraft(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to schedule a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Schedule a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).scheduleCampaignDraft(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to send a campaign draft immediately by providing the ID of the campaign draft.
         * @summary Send a campaign draft immediately
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCampaignDraftImmediately(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftSendingResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).sendCampaignDraftImmediately(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to send a test email for a specified campaign draft by providing the ID of the campaign draft and the recipients of the test email.
         * @summary Send a test email for a specified campaign draft
         * @param {SendTestEmailDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTestEmail(body: SendTestEmailDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftSendingResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).sendTestEmail(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update a campaign draft. The user can change the title, subject, contactsListId, senderEmail, senderName, senderId and locale of the campaign draft.
         * @summary Update a campaign draft
         * @param {UpdateMarketingCampDraftDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaignDraft(body: UpdateMarketingCampDraftDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateCampaignDraft(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update the content of a campaign draft. The user must provide the ID of the campaign draft and the html content.
         * @summary Update the content of a campaign draft
         * @param {UpdateCampaignDraftContentDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaignDraftContent(body: UpdateCampaignDraftContentDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignContentResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateCampaignDraftContent(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update a contact. The user can exclude the contact from campaigns by setting the isExcludedFromCampaigns parameter to true.
         * @summary Update a contact
         * @param {string} id 
         * @param {boolean} isExcludedFromCampaigns 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(id: string, isExcludedFromCampaigns: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactFullResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateContact(id, isExcludedFromCampaigns, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update a contact list. The user can change the name of the contact list.
         * @summary Update a contact list
         * @param {CreateContactListDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContactList(body: CreateContactListDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ContactListsResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateContactList(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update an existing email template. The user must provide the ID of the email template and the name, html content, text content, subject and description.
         * @summary Update an existing email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailTemplate(body: CreateEmailTemplateDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateEmailTemplate(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to update the sending schedule of a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Update the sending schedule of a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSendingScheduleOfCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).updateSendingScheduleOfCampaignDraft(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * to view the sending status of a campaign draft by providing the ID of the campaign draft.
         * @summary View the sending status of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSendingStatusOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CampaignDraftSendingResponseDTO>>> {
            const localVarAxiosArgs = await MarketingApiAxiosParamCreator(configuration).viewSendingStatusOfCampaignDraft(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MarketingApi - factory interface
 * @export
 */
export const MarketingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * to add a contact to a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Add a contact to a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addContactToList(body: AddContactToListDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).addContactToList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to cancel the scheduled sending of a campaign draft by providing the ID of the campaign draft.
         * @summary Cancel the scheduled sending of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelScheduledSendingOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).cancelScheduledSendingOfCampaignDraft(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to create a new campaign draft. The user must provide a title, subject, contactsListId, senderEmail, senderName, senderId and locale.
         * @summary Create a new campaign draft
         * @param {CreateMarketingCampaignDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCampaignDraft(body: CreateMarketingCampaignDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftResponseDTO>> {
            return MarketingApiFp(configuration).createCampaignDraft(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to create a new contact. The user must provide a name, email and isExcludedFromCampaigns parameter.
         * @summary Create a new contact
         * @param {CreateContactDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(body: CreateContactDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactFullResponseDTO>> {
            return MarketingApiFp(configuration).createContact(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to create a new contact list. The user must provide a name for the contact list.
         * @summary Create a new contact list
         * @param {CreateContactListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactList(body: CreateContactListDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListsResponseDTO>> {
            return MarketingApiFp(configuration).createContactList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to create a new email template. The user must provide a name, html content, text content, subject and description.
         * @summary Create a new email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailTemplate(body: CreateEmailTemplateDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
            return MarketingApiFp(configuration).createEmailTemplate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to delete a contact list by providing the ID of the contact list.
         * @summary Delete a contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactList(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).deleteContactList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to delete an existing email template. The user must provide the ID of the email template.
         * @summary Delete an existing email template
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmailTemplate(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).deleteEmailTemplate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to retrieve aggregated open and click statistics, grouped by recipient country.
         * @summary ***** Retrieve aggregated open and click statistics, grouped by recipient country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedOpenAndClickStatsGroupedByCountry(options?: AxiosRequestConfig): Promise<AxiosResponse<CountryStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedOpenAndClickStatsGroupedByCountry(options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics for all clicked links.
         * @summary Get aggregated statistics for all clicked links
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForAllClickedLinks(options?: AxiosRequestConfig): Promise<AxiosResponse<LinkStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedStatsForAllClickedLinks(options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics for all clicked links in a campaign by providing the ID of the campaign.
         * @summary Get aggregated statistics for all clicked links in a campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForAllClickedLinksInCampaign(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).getAggregatedStatsForAllClickedLinksInCampaign(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics for a specific contact by providing the ID of the contact.
         * @summary Get aggregated statistics for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForSpecificContact(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedStatsForSpecificContact(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics for a specific list recipient by providing the ID of the list recipient.
         * @summary Get aggregated statistics for a specific list recipient
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsForSpecificListRecipient(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedStatsForSpecificListRecipient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics, grouped by contact.
         * @summary Get aggregated statistics, grouped by contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsGroupedByContact(options?: AxiosRequestConfig): Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedStatsGroupedByContact(options).then((request) => request(axios, basePath));
        },
        /**
         * to get aggregated statistics, grouped by list recipient.
         * @summary Get aggregated statistics, grouped by list recipient
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAggregatedStatsGroupedByListRecipient(options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListStatsResponseDTO>> {
            return MarketingApiFp(configuration).getAggregatedStatsGroupedByListRecipient(options).then((request) => request(axios, basePath));
        },
        /**
         * to get all campaign drafts that have been created by the user.
         * @summary Get all campaign drafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCampaignDrafts(options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftResponseDTO>> {
            return MarketingApiFp(configuration).getAllCampaignDrafts(options).then((request) => request(axios, basePath));
        },
        /**
         * to get all contact lists that have been created by the user.
         * @summary Get all contact lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContactLists(options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListsResponseDTO>> {
            return MarketingApiFp(configuration).getAllContactLists(options).then((request) => request(axios, basePath));
        },
        /**
         * to get all contact lists for a specific contact by providing the ID of the contact.
         * @summary Get all contact lists for a specific contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContactListsForContact(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListsResponseDTO>> {
            return MarketingApiFp(configuration).getAllContactListsForContact(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get all contacts that have been created by the user.
         * @summary Get all contacts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllContacts(options?: AxiosRequestConfig): Promise<AxiosResponse<ContactFullResponseDTO>> {
            return MarketingApiFp(configuration).getAllContacts(options).then((request) => request(axios, basePath));
        },
        /**
         * to get all email templates that have been created by the user.
         * @summary Get all email templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmailTemplates(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
            return MarketingApiFp(configuration).getAllEmailTemplates(options).then((request) => request(axios, basePath));
        },
        /**
         * to get a single campaign draft by providing the ID of the campaign draft.
         * @summary Get a single campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftResponseDTO>> {
            return MarketingApiFp(configuration).getCampaignDraft(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to retrieve the content of a campaign draft email by providing the ID of the campaign draft.
         * @summary Retrieve the content of a campaign draft email
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDraftContent(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignContentResponseDTO>> {
            return MarketingApiFp(configuration).getCampaignDraftContent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get a single contact by providing the ID of the contact.
         * @summary Get a single contact
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactFullResponseDTO>> {
            return MarketingApiFp(configuration).getContact(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get a single contact list by providing the ID of the contact list.
         * @summary Get a single contact list
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactList(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListsResponseDTO>> {
            return MarketingApiFp(configuration).getContactList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to get general details and stats for all drafts, AB Testing objects and/or sent campaigns.
         * @summary Get general details and stats for all drafts, AB Testing objects and/or sent campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGeneralDetailsAndStats(options?: AxiosRequestConfig): Promise<AxiosResponse<GeneralStatsResponseDTO>> {
            return MarketingApiFp(configuration).getGeneralDetailsAndStats(options).then((request) => request(axios, basePath));
        },
        /**
         * to get open or click counts, grouped by web browser / email client.
         * @summary Get open or click counts, grouped by web browser / email client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenOrClickCountsGroupedByBrowser(options?: AxiosRequestConfig): Promise<AxiosResponse<BrowserStatsResponseDTO>> {
            return MarketingApiFp(configuration).getOpenOrClickCountsGroupedByBrowser(options).then((request) => request(axios, basePath));
        },
        /**
         * to get information about a specific draft, AB Testing object or sent campaign by providing the ID of the campaign
         * @summary Get information about a specific draft, AB Testing object or sent campaign
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificStats(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GeneralStatsResponseDTO>> {
            return MarketingApiFp(configuration).getSpecificStats(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to retrieve statistics, aggregated by recipient's Email Service Provider  (ESP).
         * @summary Retrieve statistics, aggregated by recipient's Email Service Provider (ESP)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatsAggregatedByRecipientESP(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).getStatsAggregatedByRecipientESP(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to remove a contact from a list. The user must provide the ID of the contact and the ID of the list.
         * @summary Remove a contact from a list
         * @param {AddContactToListDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeContactFromList(body: AddContactToListDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).removeContactFromList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * to retrieve the sending schedule of a campaign draft by providing the ID of the campaign draft.
         * @summary Retrieve the sending schedule of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveSendingScheduleOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>> {
            return MarketingApiFp(configuration).retrieveSendingScheduleOfCampaignDraft(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to schedule a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Schedule a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>> {
            return MarketingApiFp(configuration).scheduleCampaignDraft(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to send a campaign draft immediately by providing the ID of the campaign draft.
         * @summary Send a campaign draft immediately
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCampaignDraftImmediately(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
            return MarketingApiFp(configuration).sendCampaignDraftImmediately(id, options).then((request) => request(axios, basePath));
        },
        /**
         * to send a test email for a specified campaign draft by providing the ID of the campaign draft and the recipients of the test email.
         * @summary Send a test email for a specified campaign draft
         * @param {SendTestEmailDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTestEmail(body: SendTestEmailDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
            return MarketingApiFp(configuration).sendTestEmail(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to update a campaign draft. The user can change the title, subject, contactsListId, senderEmail, senderName, senderId and locale of the campaign draft.
         * @summary Update a campaign draft
         * @param {UpdateMarketingCampDraftDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaignDraft(body: UpdateMarketingCampDraftDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftResponseDTO>> {
            return MarketingApiFp(configuration).updateCampaignDraft(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to update the content of a campaign draft. The user must provide the ID of the campaign draft and the html content.
         * @summary Update the content of a campaign draft
         * @param {UpdateCampaignDraftContentDto} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCampaignDraftContent(body: UpdateCampaignDraftContentDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignContentResponseDTO>> {
            return MarketingApiFp(configuration).updateCampaignDraftContent(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to update a contact. The user can exclude the contact from campaigns by setting the isExcludedFromCampaigns parameter to true.
         * @summary Update a contact
         * @param {string} id 
         * @param {boolean} isExcludedFromCampaigns 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(id: string, isExcludedFromCampaigns: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactFullResponseDTO>> {
            return MarketingApiFp(configuration).updateContact(id, isExcludedFromCampaigns, options).then((request) => request(axios, basePath));
        },
        /**
         * to update a contact list. The user can change the name of the contact list.
         * @summary Update a contact list
         * @param {CreateContactListDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContactList(body: CreateContactListDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ContactListsResponseDTO>> {
            return MarketingApiFp(configuration).updateContactList(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to update an existing email template. The user must provide the ID of the email template and the name, html content, text content, subject and description.
         * @summary Update an existing email template
         * @param {CreateEmailTemplateDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailTemplate(body: CreateEmailTemplateDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
            return MarketingApiFp(configuration).updateEmailTemplate(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to update the sending schedule of a campaign draft by providing the ID of the campaign draft and the date of the schedule.
         * @summary Update the sending schedule of a campaign draft
         * @param {ScheduleCampaignDraftDTO} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSendingScheduleOfCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MarketingApiFp(configuration).updateSendingScheduleOfCampaignDraft(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * to view the sending status of a campaign draft by providing the ID of the campaign draft.
         * @summary View the sending status of a campaign draft
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSendingStatusOfCampaignDraft(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
            return MarketingApiFp(configuration).viewSendingStatusOfCampaignDraft(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketingApi - object-oriented interface
 * @export
 * @class MarketingApi
 * @extends {BaseAPI}
 */
export class MarketingApi extends BaseAPI {
    /**
     * to add a contact to a list. The user must provide the ID of the contact and the ID of the list.
     * @summary Add a contact to a list
     * @param {AddContactToListDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async addContactToList(body: AddContactToListDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).addContactToList(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to cancel the scheduled sending of a campaign draft by providing the ID of the campaign draft.
     * @summary Cancel the scheduled sending of a campaign draft
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async cancelScheduledSendingOfCampaignDraft(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).cancelScheduledSendingOfCampaignDraft(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to create a new campaign draft. The user must provide a title, subject, contactsListId, senderEmail, senderName, senderId and locale.
     * @summary Create a new campaign draft
     * @param {CreateMarketingCampaignDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async createCampaignDraft(body: CreateMarketingCampaignDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftResponseDTO>> {
        return MarketingApiFp(this.configuration).createCampaignDraft(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to create a new contact. The user must provide a name, email and isExcludedFromCampaigns parameter.
     * @summary Create a new contact
     * @param {CreateContactDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async createContact(body: CreateContactDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactFullResponseDTO>> {
        return MarketingApiFp(this.configuration).createContact(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to create a new contact list. The user must provide a name for the contact list.
     * @summary Create a new contact list
     * @param {CreateContactListDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async createContactList(body: CreateContactListDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListsResponseDTO>> {
        return MarketingApiFp(this.configuration).createContactList(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to create a new email template. The user must provide a name, html content, text content, subject and description.
     * @summary Create a new email template
     * @param {CreateEmailTemplateDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async createEmailTemplate(body: CreateEmailTemplateDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
        return MarketingApiFp(this.configuration).createEmailTemplate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to delete a contact list by providing the ID of the contact list.
     * @summary Delete a contact list
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async deleteContactList(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).deleteContactList(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to delete an existing email template. The user must provide the ID of the email template.
     * @summary Delete an existing email template
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async deleteEmailTemplate(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).deleteEmailTemplate(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to retrieve aggregated open and click statistics, grouped by recipient country.
     * @summary ***** Retrieve aggregated open and click statistics, grouped by recipient country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedOpenAndClickStatsGroupedByCountry(options?: AxiosRequestConfig) : Promise<AxiosResponse<CountryStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedOpenAndClickStatsGroupedByCountry(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics for all clicked links.
     * @summary Get aggregated statistics for all clicked links
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsForAllClickedLinks(options?: AxiosRequestConfig) : Promise<AxiosResponse<LinkStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsForAllClickedLinks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics for all clicked links in a campaign by providing the ID of the campaign.
     * @summary Get aggregated statistics for all clicked links in a campaign
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsForAllClickedLinksInCampaign(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsForAllClickedLinksInCampaign(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics for a specific contact by providing the ID of the contact.
     * @summary Get aggregated statistics for a specific contact
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsForSpecificContact(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsForSpecificContact(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics for a specific list recipient by providing the ID of the list recipient.
     * @summary Get aggregated statistics for a specific list recipient
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsForSpecificListRecipient(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsForSpecificListRecipient(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics, grouped by contact.
     * @summary Get aggregated statistics, grouped by contact
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsGroupedByContact(options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactAggregatedStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsGroupedByContact(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get aggregated statistics, grouped by list recipient.
     * @summary Get aggregated statistics, grouped by list recipient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAggregatedStatsGroupedByListRecipient(options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAggregatedStatsGroupedByListRecipient(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get all campaign drafts that have been created by the user.
     * @summary Get all campaign drafts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAllCampaignDrafts(options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftResponseDTO>> {
        return MarketingApiFp(this.configuration).getAllCampaignDrafts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get all contact lists that have been created by the user.
     * @summary Get all contact lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAllContactLists(options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAllContactLists(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get all contact lists for a specific contact by providing the ID of the contact.
     * @summary Get all contact lists for a specific contact
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAllContactListsForContact(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListsResponseDTO>> {
        return MarketingApiFp(this.configuration).getAllContactListsForContact(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get all contacts that have been created by the user.
     * @summary Get all contacts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAllContacts(options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactFullResponseDTO>> {
        return MarketingApiFp(this.configuration).getAllContacts(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get all email templates that have been created by the user.
     * @summary Get all email templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getAllEmailTemplates(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
        return MarketingApiFp(this.configuration).getAllEmailTemplates(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get a single campaign draft by providing the ID of the campaign draft.
     * @summary Get a single campaign draft
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getCampaignDraft(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftResponseDTO>> {
        return MarketingApiFp(this.configuration).getCampaignDraft(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to retrieve the content of a campaign draft email by providing the ID of the campaign draft.
     * @summary Retrieve the content of a campaign draft email
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getCampaignDraftContent(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignContentResponseDTO>> {
        return MarketingApiFp(this.configuration).getCampaignDraftContent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get a single contact by providing the ID of the contact.
     * @summary Get a single contact
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getContact(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactFullResponseDTO>> {
        return MarketingApiFp(this.configuration).getContact(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get a single contact list by providing the ID of the contact list.
     * @summary Get a single contact list
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getContactList(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListsResponseDTO>> {
        return MarketingApiFp(this.configuration).getContactList(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get general details and stats for all drafts, AB Testing objects and/or sent campaigns.
     * @summary Get general details and stats for all drafts, AB Testing objects and/or sent campaigns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getGeneralDetailsAndStats(options?: AxiosRequestConfig) : Promise<AxiosResponse<GeneralStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getGeneralDetailsAndStats(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get open or click counts, grouped by web browser / email client.
     * @summary Get open or click counts, grouped by web browser / email client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getOpenOrClickCountsGroupedByBrowser(options?: AxiosRequestConfig) : Promise<AxiosResponse<BrowserStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getOpenOrClickCountsGroupedByBrowser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to get information about a specific draft, AB Testing object or sent campaign by providing the ID of the campaign
     * @summary Get information about a specific draft, AB Testing object or sent campaign
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getSpecificStats(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GeneralStatsResponseDTO>> {
        return MarketingApiFp(this.configuration).getSpecificStats(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to retrieve statistics, aggregated by recipient's Email Service Provider  (ESP).
     * @summary Retrieve statistics, aggregated by recipient's Email Service Provider (ESP)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async getStatsAggregatedByRecipientESP(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).getStatsAggregatedByRecipientESP(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to remove a contact from a list. The user must provide the ID of the contact and the ID of the list.
     * @summary Remove a contact from a list
     * @param {AddContactToListDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async removeContactFromList(body: AddContactToListDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).removeContactFromList(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to retrieve the sending schedule of a campaign draft by providing the ID of the campaign draft.
     * @summary Retrieve the sending schedule of a campaign draft
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async retrieveSendingScheduleOfCampaignDraft(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>> {
        return MarketingApiFp(this.configuration).retrieveSendingScheduleOfCampaignDraft(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to schedule a campaign draft by providing the ID of the campaign draft and the date of the schedule.
     * @summary Schedule a campaign draft
     * @param {ScheduleCampaignDraftDTO} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async scheduleCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftScheduleResponseDTO>> {
        return MarketingApiFp(this.configuration).scheduleCampaignDraft(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to send a campaign draft immediately by providing the ID of the campaign draft.
     * @summary Send a campaign draft immediately
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async sendCampaignDraftImmediately(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
        return MarketingApiFp(this.configuration).sendCampaignDraftImmediately(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to send a test email for a specified campaign draft by providing the ID of the campaign draft and the recipients of the test email.
     * @summary Send a test email for a specified campaign draft
     * @param {SendTestEmailDTO} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async sendTestEmail(body: SendTestEmailDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
        return MarketingApiFp(this.configuration).sendTestEmail(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update a campaign draft. The user can change the title, subject, contactsListId, senderEmail, senderName, senderId and locale of the campaign draft.
     * @summary Update a campaign draft
     * @param {UpdateMarketingCampDraftDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateCampaignDraft(body: UpdateMarketingCampDraftDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftResponseDTO>> {
        return MarketingApiFp(this.configuration).updateCampaignDraft(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update the content of a campaign draft. The user must provide the ID of the campaign draft and the html content.
     * @summary Update the content of a campaign draft
     * @param {UpdateCampaignDraftContentDto} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateCampaignDraftContent(body: UpdateCampaignDraftContentDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignContentResponseDTO>> {
        return MarketingApiFp(this.configuration).updateCampaignDraftContent(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update a contact. The user can exclude the contact from campaigns by setting the isExcludedFromCampaigns parameter to true.
     * @summary Update a contact
     * @param {string} id 
     * @param {boolean} isExcludedFromCampaigns 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateContact(id: string, isExcludedFromCampaigns: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactFullResponseDTO>> {
        return MarketingApiFp(this.configuration).updateContact(id, isExcludedFromCampaigns, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update a contact list. The user can change the name of the contact list.
     * @summary Update a contact list
     * @param {CreateContactListDTO} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateContactList(body: CreateContactListDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ContactListsResponseDTO>> {
        return MarketingApiFp(this.configuration).updateContactList(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update an existing email template. The user must provide the ID of the email template and the name, html content, text content, subject and description.
     * @summary Update an existing email template
     * @param {CreateEmailTemplateDTO} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateEmailTemplate(body: CreateEmailTemplateDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<EmailTemplateResponseDTO>>> {
        return MarketingApiFp(this.configuration).updateEmailTemplate(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to update the sending schedule of a campaign draft by providing the ID of the campaign draft and the date of the schedule.
     * @summary Update the sending schedule of a campaign draft
     * @param {ScheduleCampaignDraftDTO} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async updateSendingScheduleOfCampaignDraft(body: ScheduleCampaignDraftDTO, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MarketingApiFp(this.configuration).updateSendingScheduleOfCampaignDraft(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * to view the sending status of a campaign draft by providing the ID of the campaign draft.
     * @summary View the sending status of a campaign draft
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketingApi
     */
    public async viewSendingStatusOfCampaignDraft(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CampaignDraftSendingResponseDTO>> {
        return MarketingApiFp(this.configuration).viewSendingStatusOfCampaignDraft(id, options).then((request) => request(this.axios, this.basePath));
    }
}
