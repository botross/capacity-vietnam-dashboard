/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EmailInvoiceDto } from '../models';
import { ManualOrderDTO } from '../models';
import { OrderPaginatedResponse } from '../models';
import { OrdersInsightsDto } from '../models';
import { PopulatedOrder } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add payment method to Order
         * @param {string} orderId 
         * @param {string} paymentMethod 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPaymentMethod: async (orderId: string, paymentMethod: string, billingAddressId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling assignPaymentMethod.');
            }
            // verify required parameter 'paymentMethod' is not null or undefined
            if (paymentMethod === null || paymentMethod === undefined) {
                throw new RequiredError('paymentMethod','Required parameter paymentMethod was null or undefined when calling assignPaymentMethod.');
            }
            const localVarPath = `/orders/assign-payment-method/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (billingAddressId !== undefined) {
                localVarQueryParameter['billingAddressId'] = billingAddressId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling cancelOrder.');
            }
            const localVarPath = `/orders/cancel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create an Order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckout: async (body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createCheckout.');
            }
            // verify required parameter 'isDelivery' is not null or undefined
            if (isDelivery === null || isDelivery === undefined) {
                throw new RequiredError('isDelivery','Required parameter isDelivery was null or undefined when calling createCheckout.');
            }
            const localVarPath = `/orders/createOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isDelivery !== undefined) {
                localVarQueryParameter['isDelivery'] = isDelivery;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }

            if (addressId !== undefined) {
                localVarQueryParameter['addressId'] = addressId;
            }

            if (billingAddressId !== undefined) {
                localVarQueryParameter['billingAddressId'] = billingAddressId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOrder.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {string} [paymentStatus] 
         * @param {string} [orderStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {Date} [createdAfter] 
         * @param {Date} [createdBefore] 
         * @param {Date} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders: async (paymentStatus?: string, orderStatus?: string, page?: number, limit?: number, search?: string, createdAfter?: Date, createdBefore?: Date, userId?: Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = (userId as any instanceof Date) ?
                    (userId as any).toISOString() :
                    userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSingleOrder.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the insights for each type of orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreOrderInsights: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/insights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pay for an Order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payOrder: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling payOrder.');
            }
            const localVarPath = `/orders/pay/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send an Invoice to email
         * @param {EmailInvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOrderEmail: async (body: EmailInvoiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendOrderEmail.');
            }
            const localVarPath = `/orders/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} id 
         * @param {string} [paymentMethod] 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (body: ManualOrderDTO, isDelivery: boolean, id: string, paymentMethod?: string, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'isDelivery' is not null or undefined
            if (isDelivery === null || isDelivery === undefined) {
                throw new RequiredError('isDelivery','Required parameter isDelivery was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrder.');
            }
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isDelivery !== undefined) {
                localVarQueryParameter['isDelivery'] = isDelivery;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }

            if (addressId !== undefined) {
                localVarQueryParameter['addressId'] = addressId;
            }

            if (billingAddressId !== undefined) {
                localVarQueryParameter['billingAddressId'] = billingAddressId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus: async (id: string, orderStatus: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrderStatus.');
            }
            // verify required parameter 'orderStatus' is not null or undefined
            if (orderStatus === null || orderStatus === undefined) {
                throw new RequiredError('orderStatus','Required parameter orderStatus was null or undefined when calling updateOrderStatus.');
            }
            const localVarPath = `/orders/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (orderStatus !== undefined) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add payment method to Order
         * @param {string} orderId 
         * @param {string} paymentMethod 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPaymentMethod(orderId: string, paymentMethod: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).assignPaymentMethod(orderId, paymentMethod, billingAddressId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).cancelOrder(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create an Order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckout(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).createCheckout(body, isDelivery, userId, rateId, addressId, billingAddressId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).deleteOrder(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {string} [paymentStatus] 
         * @param {string} [orderStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {Date} [createdAfter] 
         * @param {Date} [createdBefore] 
         * @param {Date} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(paymentStatus?: string, orderStatus?: string, page?: number, limit?: number, search?: string, createdAfter?: Date, createdBefore?: Date, userId?: Date, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrderPaginatedResponse>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).getAllOrders(paymentStatus, orderStatus, page, limit, search, createdAfter, createdBefore, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).getSingleOrder(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the insights for each type of orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreOrderInsights(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrdersInsightsDto>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).getStoreOrderInsights(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all orders for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<PopulatedOrder>>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).getUserOrders(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Pay for an Order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payOrder(orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).payOrder(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Send an Invoice to email
         * @param {EmailInvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOrderEmail(body: EmailInvoiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).sendOrderEmail(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} id 
         * @param {string} [paymentMethod] 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(body: ManualOrderDTO, isDelivery: boolean, id: string, paymentMethod?: string, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).updateOrder(body, isDelivery, id, paymentMethod, userId, rateId, addressId, billingAddressId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderStatus(id: string, orderStatus: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PopulatedOrder>>> {
            const localVarAxiosArgs = await OrdersApiAxiosParamCreator(configuration).updateOrderStatus(id, orderStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add payment method to Order
         * @param {string} orderId 
         * @param {string} paymentMethod 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPaymentMethod(orderId: string, paymentMethod: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).assignPaymentMethod(orderId, paymentMethod, billingAddressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).cancelOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create an Order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckout(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).createCheckout(body, isDelivery, userId, rateId, addressId, billingAddressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return OrdersApiFp(configuration).deleteOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders
         * @param {string} [paymentStatus] 
         * @param {string} [orderStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {Date} [createdAfter] 
         * @param {Date} [createdBefore] 
         * @param {Date} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(paymentStatus?: string, orderStatus?: string, page?: number, limit?: number, search?: string, createdAfter?: Date, createdBefore?: Date, userId?: Date, options?: AxiosRequestConfig): Promise<AxiosResponse<OrderPaginatedResponse>> {
            return OrdersApiFp(configuration).getAllOrders(paymentStatus, orderStatus, page, limit, search, createdAfter, createdBefore, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an order by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleOrder(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).getSingleOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the insights for each type of orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreOrderInsights(options?: AxiosRequestConfig): Promise<AxiosResponse<OrdersInsightsDto>> {
            return OrdersApiFp(configuration).getStoreOrderInsights(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all orders for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrders(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<PopulatedOrder>>> {
            return OrdersApiFp(configuration).getUserOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pay for an Order
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payOrder(orderId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).payOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send an Invoice to email
         * @param {EmailInvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOrderEmail(body: EmailInvoiceDto, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return OrdersApiFp(configuration).sendOrderEmail(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order
         * @param {ManualOrderDTO} body 
         * @param {boolean} isDelivery 
         * @param {string} id 
         * @param {string} [paymentMethod] 
         * @param {string} [userId] 
         * @param {string} [rateId] 
         * @param {string} [addressId] The desired address id for the store location for the pickup
         * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(body: ManualOrderDTO, isDelivery: boolean, id: string, paymentMethod?: string, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).updateOrder(body, isDelivery, id, paymentMethod, userId, rateId, addressId, billingAddressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} orderStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderStatus(id: string, orderStatus: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PopulatedOrder>> {
            return OrdersApiFp(configuration).updateOrderStatus(id, orderStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary Add payment method to Order
     * @param {string} orderId 
     * @param {string} paymentMethod 
     * @param {string} [billingAddressId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async assignPaymentMethod(orderId: string, paymentMethod: string, billingAddressId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).assignPaymentMethod(orderId, paymentMethod, billingAddressId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Cancel an order
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async cancelOrder(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).cancelOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create an Order
     * @param {ManualOrderDTO} body 
     * @param {boolean} isDelivery 
     * @param {string} [userId] 
     * @param {string} [rateId] 
     * @param {string} [addressId] The desired address id for the store location for the pickup
     * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async createCheckout(body: ManualOrderDTO, isDelivery: boolean, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).createCheckout(body, isDelivery, userId, rateId, addressId, billingAddressId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete an order
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async deleteOrder(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return OrdersApiFp(this.configuration).deleteOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all orders
     * @param {string} [paymentStatus] 
     * @param {string} [orderStatus] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [search] 
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {Date} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async getAllOrders(paymentStatus?: string, orderStatus?: string, page?: number, limit?: number, search?: string, createdAfter?: Date, createdBefore?: Date, userId?: Date, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrderPaginatedResponse>> {
        return OrdersApiFp(this.configuration).getAllOrders(paymentStatus, orderStatus, page, limit, search, createdAfter, createdBefore, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get an order by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async getSingleOrder(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).getSingleOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the insights for each type of orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async getStoreOrderInsights(options?: AxiosRequestConfig) : Promise<AxiosResponse<OrdersInsightsDto>> {
        return OrdersApiFp(this.configuration).getStoreOrderInsights(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all orders for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async getUserOrders(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<PopulatedOrder>>> {
        return OrdersApiFp(this.configuration).getUserOrders(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Pay for an Order
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async payOrder(orderId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).payOrder(orderId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Send an Invoice to email
     * @param {EmailInvoiceDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async sendOrderEmail(body: EmailInvoiceDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return OrdersApiFp(this.configuration).sendOrderEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update an order
     * @param {ManualOrderDTO} body 
     * @param {boolean} isDelivery 
     * @param {string} id 
     * @param {string} [paymentMethod] 
     * @param {string} [userId] 
     * @param {string} [rateId] 
     * @param {string} [addressId] The desired address id for the store location for the pickup
     * @param {string} [billingAddressId] The desired address id for the billing address in case of paying by card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async updateOrder(body: ManualOrderDTO, isDelivery: boolean, id: string, paymentMethod?: string, userId?: string, rateId?: string, addressId?: string, billingAddressId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).updateOrder(body, isDelivery, id, paymentMethod, userId, rateId, addressId, billingAddressId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update an order status
     * @param {string} id 
     * @param {string} orderStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public async updateOrderStatus(id: string, orderStatus: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PopulatedOrder>> {
        return OrdersApiFp(this.configuration).updateOrderStatus(id, orderStatus, options).then((request) => request(this.axios, this.basePath));
    }
}
