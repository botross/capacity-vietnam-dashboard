/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Payment } from '../models';
import { PaymentsInsightsDto } from '../models';
import { PaymentsPaginatedResponse } from '../models';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all payments
         * @param {string} [paymentStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayments: async (paymentStatus?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the insights for each type of payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymnetInsights: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payments/insights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Recharge user credit
         * @param {number} amount 
         * @param {string} paymentMethod 
         * @param {string} [userId] 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rechargeUserCredit: async (amount: number, paymentMethod: string, userId?: string, billingAddressId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling rechargeUserCredit.');
            }
            // verify required parameter 'paymentMethod' is not null or undefined
            if (paymentMethod === null || paymentMethod === undefined) {
                throw new RequiredError('paymentMethod','Required parameter paymentMethod was null or undefined when calling rechargeUserCredit.');
            }
            const localVarPath = `/payments/rechurge-user-credit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (paymentMethod !== undefined) {
                localVarQueryParameter['paymentMethod'] = paymentMethod;
            }

            if (billingAddressId !== undefined) {
                localVarQueryParameter['billingAddressId'] = billingAddressId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentStatus: async (id: string, paymentStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePaymentStatus.');
            }
            const localVarPath = `/payments/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all payments
         * @param {string} [paymentStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayments(paymentStatus?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaymentsPaginatedResponse>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getAllPayments(paymentStatus, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the insights for each type of payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymnetInsights(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PaymentsInsightsDto>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).getPaymnetInsights(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Recharge user credit
         * @param {number} amount 
         * @param {string} paymentMethod 
         * @param {string} [userId] 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechargeUserCredit(amount: number, paymentMethod: string, userId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Payment>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).rechargeUserCredit(amount, paymentMethod, userId, billingAddressId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentStatus(id: string, paymentStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Payment>>> {
            const localVarAxiosArgs = await PaymentsApiAxiosParamCreator(configuration).updatePaymentStatus(id, paymentStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all payments
         * @param {string} [paymentStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayments(paymentStatus?: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<PaymentsPaginatedResponse>> {
            return PaymentsApiFp(configuration).getAllPayments(paymentStatus, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the insights for each type of payments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymnetInsights(options?: AxiosRequestConfig): Promise<AxiosResponse<PaymentsInsightsDto>> {
            return PaymentsApiFp(configuration).getPaymnetInsights(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Recharge user credit
         * @param {number} amount 
         * @param {string} paymentMethod 
         * @param {string} [userId] 
         * @param {string} [billingAddressId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rechargeUserCredit(amount: number, paymentMethod: string, userId?: string, billingAddressId?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Payment>> {
            return PaymentsApiFp(configuration).rechargeUserCredit(amount, paymentMethod, userId, billingAddressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an order status
         * @param {string} id 
         * @param {string} [paymentStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentStatus(id: string, paymentStatus?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Payment>> {
            return PaymentsApiFp(configuration).updatePaymentStatus(id, paymentStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @summary Get all payments
     * @param {string} [paymentStatus] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async getAllPayments(paymentStatus?: string, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<PaymentsPaginatedResponse>> {
        return PaymentsApiFp(this.configuration).getAllPayments(paymentStatus, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get the insights for each type of payments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async getPaymnetInsights(options?: AxiosRequestConfig) : Promise<AxiosResponse<PaymentsInsightsDto>> {
        return PaymentsApiFp(this.configuration).getPaymnetInsights(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Recharge user credit
     * @param {number} amount 
     * @param {string} paymentMethod 
     * @param {string} [userId] 
     * @param {string} [billingAddressId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async rechargeUserCredit(amount: number, paymentMethod: string, userId?: string, billingAddressId?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Payment>> {
        return PaymentsApiFp(this.configuration).rechargeUserCredit(amount, paymentMethod, userId, billingAddressId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update an order status
     * @param {string} id 
     * @param {string} [paymentStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public async updatePaymentStatus(id: string, paymentStatus?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Payment>> {
        return PaymentsApiFp(this.configuration).updatePaymentStatus(id, paymentStatus, options).then((request) => request(this.axios, this.basePath));
    }
}
