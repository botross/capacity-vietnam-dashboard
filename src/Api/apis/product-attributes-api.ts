/* tslint:disable */
/* eslint-disable */
/**
 * Hey Pharamcist API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateProductAttributeDto } from '../models';
import { ProductAttribute } from '../models';
import { UpdateProductAttributeDto } from '../models';
/**
 * ProductAttributesApi - axios parameter creator
 * @export
 */
export const ProductAttributesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new product attribute
         * @param {CreateProductAttributeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProductAttribute: async (body: CreateProductAttributeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createProductAttribute.');
            }
            const localVarPath = `/product-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductAttribute: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteProductAttribute.');
            }
            const localVarPath = `/product-attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all product attributes
         * @param {string} [sortingColumn] 
         * @param {string} [sortingOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductAttributes: async (sortingColumn?: string, sortingOrder?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            if (sortingColumn !== undefined) {
                localVarQueryParameter['sortingColumn'] = sortingColumn;
            }

            if (sortingOrder !== undefined) {
                localVarQueryParameter['sortingOrder'] = sortingOrder;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a single product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleProductAttribute: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSingleProductAttribute.');
            }
            const localVarPath = `/product-attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a product attribute
         * @param {UpdateProductAttributeDto} body 
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProductAttribute: async (body: UpdateProductAttributeDto, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProductAttribute.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateProductAttribute.');
            }
            const localVarPath = `/product-attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            // authentication x-store-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-store-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-store-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || (localVarRequestOptions.headers ||= {})['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAttributesApi - functional programming interface
 * @export
 */
export const ProductAttributesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new product attribute
         * @param {CreateProductAttributeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductAttribute(body: CreateProductAttributeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductAttribute>>> {
            const localVarAxiosArgs = await ProductAttributesApiAxiosParamCreator(configuration).createProductAttribute(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductAttribute(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProductAttributesApiAxiosParamCreator(configuration).deleteProductAttribute(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all product attributes
         * @param {string} [sortingColumn] 
         * @param {string} [sortingOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductAttributes(sortingColumn?: string, sortingOrder?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProductAttribute>>>> {
            const localVarAxiosArgs = await ProductAttributesApiAxiosParamCreator(configuration).getAllProductAttributes(sortingColumn, sortingOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a single product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleProductAttribute(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductAttribute>>> {
            const localVarAxiosArgs = await ProductAttributesApiAxiosParamCreator(configuration).getSingleProductAttribute(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a product attribute
         * @param {UpdateProductAttributeDto} body 
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductAttribute(body: UpdateProductAttributeDto, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProductAttribute>>> {
            const localVarAxiosArgs = await ProductAttributesApiAxiosParamCreator(configuration).updateProductAttribute(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductAttributesApi - factory interface
 * @export
 */
export const ProductAttributesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create a new product attribute
         * @param {CreateProductAttributeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProductAttribute(body: CreateProductAttributeDto, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductAttribute>> {
            return ProductAttributesApiFp(configuration).createProductAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductAttribute(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProductAttributesApiFp(configuration).deleteProductAttribute(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all product attributes
         * @param {string} [sortingColumn] 
         * @param {string} [sortingOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductAttributes(sortingColumn?: string, sortingOrder?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProductAttribute>>> {
            return ProductAttributesApiFp(configuration).getAllProductAttributes(sortingColumn, sortingOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a single product attribute
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleProductAttribute(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductAttribute>> {
            return ProductAttributesApiFp(configuration).getSingleProductAttribute(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a product attribute
         * @param {UpdateProductAttributeDto} body 
         * @param {string} id Product Attribute ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProductAttribute(body: UpdateProductAttributeDto, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProductAttribute>> {
            return ProductAttributesApiFp(configuration).updateProductAttribute(body, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductAttributesApi - object-oriented interface
 * @export
 * @class ProductAttributesApi
 * @extends {BaseAPI}
 */
export class ProductAttributesApi extends BaseAPI {
    /**
     * 
     * @summary Create a new product attribute
     * @param {CreateProductAttributeDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApi
     */
    public async createProductAttribute(body: CreateProductAttributeDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductAttribute>> {
        return ProductAttributesApiFp(this.configuration).createProductAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a product attribute
     * @param {string} id Product Attribute ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApi
     */
    public async deleteProductAttribute(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProductAttributesApiFp(this.configuration).deleteProductAttribute(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all product attributes
     * @param {string} [sortingColumn] 
     * @param {string} [sortingOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApi
     */
    public async getAllProductAttributes(sortingColumn?: string, sortingOrder?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProductAttribute>>> {
        return ProductAttributesApiFp(this.configuration).getAllProductAttributes(sortingColumn, sortingOrder, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a single product attribute
     * @param {string} id Product Attribute ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApi
     */
    public async getSingleProductAttribute(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductAttribute>> {
        return ProductAttributesApiFp(this.configuration).getSingleProductAttribute(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a product attribute
     * @param {UpdateProductAttributeDto} body 
     * @param {string} id Product Attribute ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApi
     */
    public async updateProductAttribute(body: UpdateProductAttributeDto, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProductAttribute>> {
        return ProductAttributesApiFp(this.configuration).updateProductAttribute(body, id, options).then((request) => request(this.axios, this.basePath));
    }
}
